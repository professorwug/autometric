{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "00a1327f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#|export\n",
    "def _distance_to_geodesic_criterion(predicted_geodesic, true_geodesic):\n",
    "    # the inputs here are single samples from a geodesic; should be shape num_samples x num_dims\n",
    "    # for each input point, we want the closest distance to any point on the true geodesic using the euclidean distance, torch.cdist\n",
    "    D = torch.cdist(predicted_geodesic, true_geodesic)\n",
    "    min_dists_to_true_geodesic = D.min(dim=1)[0]\n",
    "    # we take the mean of the squared distances\n",
    "    return torch.mean(min_dists_to_true_geodesic**2)\n",
    "\n",
    "def distance_to_geodesic_criterion(\n",
    "    predicted_geodesic:torch.Tensor, # size num_geodesics x num_samples x num_dims\n",
    "    true_geodesic:torch.Tensor, # size num_geodesics num_samples x num_dims. But it's okay if the num_samples are different\n",
    "    ):\n",
    "    \"\"\"\n",
    "    Mean of the squared distances from each predicted point to the closest point on the true geodesic\n",
    "    \"\"\"\n",
    "    dists = []\n",
    "    for i in range(len(predicted_geodesic)):\n",
    "        a = predicted_geodesic[i]\n",
    "        b = true_geodesic[i]\n",
    "        if not isinstance(a, torch.Tensor):\n",
    "            a = torch.tensor(a)\n",
    "        if not isinstance(b, torch.Tensor):\n",
    "            b = torch.tensor(b)\n",
    "        dists.append(_distance_to_geodesic_criterion(predicted_geodesic[i], true_geodesic[i]))\n",
    "    dists = torch.stack(dists)\n",
    "    return dists.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee427d83",
   "metadata": {},
   "outputs": [],
   "source": [
    "#|export\n",
    "import torch\n",
    "def _distance_to_geodesic_criterion(predicted_geodesic, true_geodesic):\n",
    "    # the inputs here are single samples from a geodesic; should be shape num_samples x num_dims\n",
    "    # for each input point, we want the closest distance to any point on the true geodesic using the euclidean distance, torch.cdist\n",
    "    D = torch.cdist(predicted_geodesic, true_geodesic)\n",
    "    min_dists_to_true_geodesic = D.min(dim=1)[0]\n",
    "    # we take the mean of the squared distances\n",
    "    return torch.mean(min_dists_to_true_geodesic**2)\n",
    "\n",
    "def distance_to_geodesic_criterion(\n",
    "    predicted_geodesic:torch.Tensor, # size num_geodesics x num_samples x num_dims\n",
    "    true_geodesic:torch.Tensor, # size num_geodesics num_samples x num_dims. But it's okay if the num_samples are different\n",
    "    ):\n",
    "    \"\"\"\n",
    "    Mean of the squared distances from each predicted point to the closest point on the true geodesic\n",
    "    \"\"\"\n",
    "    dists = []\n",
    "    for i in range(len(predicted_geodesic)):\n",
    "        a = predicted_geodesic[i]\n",
    "        b = true_geodesic[i]\n",
    "        if not isinstance(a, torch.Tensor):\n",
    "            a = torch.tensor(a)\n",
    "        if not isinstance(b, torch.Tensor):\n",
    "            b = torch.tensor(b)\n",
    "        dists.append(_distance_to_geodesic_criterion(predicted_geodesic[i], true_geodesic[i]))\n",
    "    dists = torch.stack(dists)\n",
    "    return dists.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "00dd0de9",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b = torch.randn(10, 20,4), torch.randn(10, 20,4)\n",
    "distance_to_geodesic_criterion(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b292c36f",
   "metadata": {},
   "outputs": [],
   "source": [
    "_distance_to_geodesic_criterion(a[4], b[4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b79dacd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook save\n",
    "!nbdev_export"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1007fa80",
   "metadata": {},
   "outputs": [],
   "source": [
    "#|export\n",
    "import torch\n",
    "def _distance_to_geodesic_criterion(predicted_geodesic, true_geodesic):\n",
    "    # the inputs here are single samples from a geodesic; should be shape num_samples x num_dims\n",
    "    # for each input point, we want the closest distance to any point on the true geodesic using the euclidean distance, torch.cdist\n",
    "    D = torch.cdist(predicted_geodesic, true_geodesic)\n",
    "    min_dists_to_true_geodesic = D.min(dim=1)[0]\n",
    "    # we take the mean of the squared distances\n",
    "    return torch.mean(min_dists_to_true_geodesic**2)\n",
    "\n",
    "def distance_to_geodesic_criterion(\n",
    "    predicted_geodesic:torch.Tensor, # size num_geodesics x num_samples x num_dims\n",
    "    true_geodesic:torch.Tensor, # size num_geodesics num_samples x num_dims. But it's okay if the num_samples are different\n",
    "    ):\n",
    "    \"\"\"\n",
    "    Mean of the squared distances from each predicted point to the closest point on the true geodesic\n",
    "    \"\"\"\n",
    "    dists = []\n",
    "    for i in range(len(predicted_geodesic)):\n",
    "        a = predicted_geodesic[i]\n",
    "        b = true_geodesic[i]\n",
    "        if not isinstance(a, torch.Tensor):\n",
    "            a = torch.tensor(a)\n",
    "        if not isinstance(b, torch.Tensor):\n",
    "            b = torch.tensor(b)\n",
    "        dists.append(_distance_to_geodesic_criterion(a, b))\n",
    "    dists = torch.stack(dists)\n",
    "    return dists.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ff92932f",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b = torch.randn(10, 20,4), torch.randn(10, 20,4)\n",
    "distance_to_geodesic_criterion(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7c20cca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "_distance_to_geodesic_criterion(a[4], b[4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3e043281",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook save\n",
    "!nbdev_export"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b32923b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#|export\n",
    "import torch\n",
    "def _distance_to_geodesic_criterion(predicted_geodesic, true_geodesic):\n",
    "    # the inputs here are single samples from a geodesic; should be shape num_samples x num_dims\n",
    "    # for each input point, we want the closest distance to any point on the true geodesic using the euclidean distance, torch.cdist\n",
    "    D = torch.cdist(predicted_geodesic, true_geodesic)\n",
    "    min_dists_to_true_geodesic = D.min(dim=1)[0]\n",
    "    # we take the mean of the squared distances\n",
    "    return torch.mean(min_dists_to_true_geodesic**2)\n",
    "\n",
    "def distance_to_geodesic_criterion(\n",
    "    predicted_geodesic:torch.Tensor, # size num_geodesics x num_samples x num_dims\n",
    "    true_geodesic:torch.Tensor, # size num_geodesics num_samples x num_dims. But it's okay if the num_samples are different\n",
    "    ):\n",
    "    \"\"\"\n",
    "    Mean of the squared distances from each predicted point to the closest point on the true geodesic\n",
    "    \"\"\"\n",
    "    dists = []\n",
    "    for i in range(len(predicted_geodesic)):\n",
    "        a = predicted_geodesic[i]\n",
    "        b = true_geodesic[i]\n",
    "        if not isinstance(a, torch.Tensor):\n",
    "            a = torch.tensor(a)\n",
    "        if not isinstance(b, torch.Tensor):\n",
    "            b = torch.tensor(b)\n",
    "        a = a.float()\n",
    "        b = b.float()\n",
    "        dists.append(_distance_to_geodesic_criterion(a, b))\n",
    "    dists = torch.stack(dists)\n",
    "    return dists.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7f145dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b = torch.randn(10, 20,4), torch.randn(10, 20,4)\n",
    "distance_to_geodesic_criterion(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "75aa7e14",
   "metadata": {},
   "outputs": [],
   "source": [
    "_distance_to_geodesic_criterion(a[4], b[4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a0e83ebb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#|export\n",
    "import torch\n",
    "def _distance_to_geodesic_criterion(predicted_geodesic, true_geodesic):\n",
    "    # the inputs here are single samples from a geodesic; should be shape num_samples x num_dims\n",
    "    # for each input point, we want the closest distance to any point on the true geodesic using the euclidean distance, torch.cdist\n",
    "    D = torch.cdist(predicted_geodesic, true_geodesic)\n",
    "    min_dists_to_true_geodesic = D.min(dim=1)[0]\n",
    "    # we take the mean of the squared distances\n",
    "    return torch.mean(min_dists_to_true_geodesic**2)\n",
    "\n",
    "def distance_to_geodesic_criterion(\n",
    "    predicted_geodesic:torch.Tensor, # size num_geodesics x num_samples x num_dims\n",
    "    true_geodesic:torch.Tensor, # size num_geodesics num_samples x num_dims. But it's okay if the num_samples are different\n",
    "    ):\n",
    "    \"\"\"\n",
    "    Mean of the squared distances from each predicted point to the closest point on the true geodesic\n",
    "    \"\"\"\n",
    "    dists = []\n",
    "    for i in range(len(predicted_geodesic)):\n",
    "        a = predicted_geodesic[i]\n",
    "        b = true_geodesic[i]\n",
    "        if not isinstance(a, torch.Tensor):\n",
    "            a = torch.tensor(a)\n",
    "        if not isinstance(b, torch.Tensor):\n",
    "            b = torch.tensor(b)\n",
    "        a = a.float()\n",
    "        b = b.float()\n",
    "        dists.append(_distance_to_geodesic_criterion(a, b))\n",
    "    dists = torch.stack(dists)\n",
    "    return dists.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5f620f81",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b = torch.randn(10, 20,4), torch.randn(10, 20,4)\n",
    "distance_to_geodesic_criterion(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c11cde91",
   "metadata": {},
   "outputs": [],
   "source": [
    "_distance_to_geodesic_criterion(a[4], b[4])"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
