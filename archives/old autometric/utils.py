# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/0u Utils.ipynb.

# %% auto 0
__all__ = ['visualize_embedding', 'printnum']

# %% ../nbs/0u Utils.ipynb 2
import numpy as np
import torch
import matplotlib.pyplot as plt
# visualize the latent embedding space of a pytorch model, colored by a given vector
def visualize_embedding(
    model,
    dataloader,
    colors=None,
    title = "Embedded Points"
):
    if colors is None:
        colors = np.zeros(len(dataloader.dataset))
    model.eval()

    embeddings = model.encoder(dataloader.dataset.pointcloud).cpu().detach().numpy()
    
    plt.figure(figsize=(10, 10))
    plt.scatter(embeddings[:, 0], embeddings[:, 1], c=colors, cmap="viridis")
    plt.title(title)
    plt.colorbar()
    plt.show()

# %% ../nbs/0u Utils.ipynb 3
def printnum(number):
    suffixes = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th']
    if 10 <= number % 100 <= 20:
        suffix = 'th'
    else:
        suffix = suffixes[number % 10]
    return f"{number}{suffix}"
