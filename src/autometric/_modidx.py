# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/autometric',
                'doc_host': 'https://professorwug.github.io',
                'git_url': 'https://github.com/professorwug/autometric',
                'lib_path': 'src/autometric'},
  'syms': { 'autometric.autometric': { 'autometric.autometric.StringGeodesic': ( 'library/string-geodesics.html#stringgeodesic',
                                                                                 'autometric/autometric.py'),
                                       'autometric.autometric.StringGeodesic.__init__': ( 'library/string-geodesics.html#__init__',
                                                                                          'autometric/autometric.py'),
                                       'autometric.autometric.StringGeodesic.apply_force': ( 'library/string-geodesics.html#apply_force',
                                                                                             'autometric/autometric.py'),
                                       'autometric.autometric.StringGeodesic.forward': ( 'library/string-geodesics.html#forward',
                                                                                         'autometric/autometric.py'),
                                       'autometric.autometric.StringGeodesic.progressive_lengths': ( 'library/string-geodesics.html#progressive_lengths',
                                                                                                     'autometric/autometric.py')},
            'autometric.branch_datasets': { 'autometric.branch_datasets.Branch': ( 'library/branch-datasets.html#branch',
                                                                                   'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Branch.__init__': ( 'library/branch-datasets.html#branch.__init__',
                                                                                            'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Branch.sample': ( 'library/branch-datasets.html#branch.sample',
                                                                                          'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Stick': ( 'library/branch-datasets.html#stick',
                                                                                  'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Stick.__init__': ( 'library/branch-datasets.html#stick.__init__',
                                                                                           'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Stick.end_point': ( 'library/branch-datasets.html#stick.end_point',
                                                                                            'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Stick.length': ( 'library/branch-datasets.html#stick.length',
                                                                                         'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Stick.sample': ( 'library/branch-datasets.html#stick.sample',
                                                                                         'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.Stick.sample_at_time': ( 'library/branch-datasets.html#stick.sample_at_time',
                                                                                                 'autometric/branch_datasets.py'),
                                            'autometric.branch_datasets.random_polynomial': ( 'library/branch-datasets.html#random_polynomial',
                                                                                              'autometric/branch_datasets.py')},
            'autometric.connections': { 'autometric.connections.LeviCivitaConnection': ( 'library/connections.html#levicivitaconnection',
                                                                                         'autometric/connections.py'),
                                        'autometric.connections.LeviCivitaConnection.__init__': ( 'library/connections.html#levicivitaconnection.__init__',
                                                                                                  'autometric/connections.py'),
                                        'autometric.connections.LeviCivitaConnection.christoffels': ( 'library/connections.html#levicivitaconnection.christoffels',
                                                                                                      'autometric/connections.py'),
                                        'autometric.connections.LeviCivitaConnection.geodesic': ( 'library/connections.html#levicivitaconnection.geodesic',
                                                                                                  'autometric/connections.py')},
            'autometric.criteria': { 'autometric.criteria.curvature_matching_metric': ( 'library/criteria.html#curvature_matching_metric',
                                                                                        'autometric/criteria.py'),
                                     'autometric.criteria.determinants_of_encoder_pullback': ( 'library/criteria.html#determinants_of_encoder_pullback',
                                                                                               'autometric/criteria.py'),
                                     'autometric.criteria.evals_of_encoder_pullback': ( 'library/criteria.html#evals_of_encoder_pullback',
                                                                                        'autometric/criteria.py'),
                                     'autometric.criteria.frequency_of_volume_variance': ( 'library/criteria.html#frequency_of_volume_variance',
                                                                                           'autometric/criteria.py'),
                                     'autometric.criteria.gaussian_kernel': ( 'library/criteria.html#gaussian_kernel',
                                                                              'autometric/criteria.py'),
                                     'autometric.criteria.indicatrix_volume_variance_metric': ( 'library/criteria.html#indicatrix_volume_variance_metric',
                                                                                                'autometric/criteria.py'),
                                     'autometric.criteria.median_heuristic': ( 'library/criteria.html#median_heuristic',
                                                                               'autometric/criteria.py'),
                                     'autometric.criteria.normal_vectors_of_encoder_pullback': ( 'library/criteria.html#normal_vectors_of_encoder_pullback',
                                                                                                 'autometric/criteria.py'),
                                     'autometric.criteria.plot_indicatrices': ( 'library/criteria.html#plot_indicatrices',
                                                                                'autometric/criteria.py'),
                                     'autometric.criteria.rank_of_encoder_pullback': ( 'library/criteria.html#rank_of_encoder_pullback',
                                                                                       'autometric/criteria.py'),
                                     'autometric.criteria.smallest_eigenvector': ( 'library/criteria.html#smallest_eigenvector',
                                                                                   'autometric/criteria.py'),
                                     'autometric.criteria.spectral_entropy_of_encoder_pullback': ( 'library/criteria.html#spectral_entropy_of_encoder_pullback',
                                                                                                   'autometric/criteria.py'),
                                     'autometric.criteria.spectral_entropy_of_matrix': ( 'library/criteria.html#spectral_entropy_of_matrix',
                                                                                         'autometric/criteria.py'),
                                     'autometric.criteria.trace_of_encoder_pullback': ( 'library/criteria.html#trace_of_encoder_pullback',
                                                                                        'autometric/criteria.py'),
                                     'autometric.criteria.visualize_encoder_pullback_metrics': ( 'library/criteria.html#visualize_encoder_pullback_metrics',
                                                                                                 'autometric/criteria.py'),
                                     'autometric.criteria.visualize_encoder_pullback_metrics_in_ambient_space': ( 'library/criteria.html#visualize_encoder_pullback_metrics_in_ambient_space',
                                                                                                                  'autometric/criteria.py')},
            'autometric.datasets': { 'autometric.datasets.Ellipsoid': ('library/datasets.html#ellipsoid', 'autometric/datasets.py'),
                                     'autometric.datasets.Ellipsoid.__init__': ( 'library/datasets.html#ellipsoid.__init__',
                                                                                 'autometric/datasets.py'),
                                     'autometric.datasets.Hemisphere': ('library/datasets.html#hemisphere', 'autometric/datasets.py'),
                                     'autometric.datasets.Hemisphere.__init__': ( 'library/datasets.html#hemisphere.__init__',
                                                                                  'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudDataset': ( 'library/datasets.html#pointclouddataset',
                                                                                'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudDataset.__getitem__': ( 'library/datasets.html#pointclouddataset.__getitem__',
                                                                                            'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudDataset.__init__': ( 'library/datasets.html#pointclouddataset.__init__',
                                                                                         'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudDataset.__len__': ( 'library/datasets.html#pointclouddataset.__len__',
                                                                                        'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudWithDistancesDataset': ( 'library/datasets.html#pointcloudwithdistancesdataset',
                                                                                             'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudWithDistancesDataset.__getitem__': ( 'library/datasets.html#pointcloudwithdistancesdataset.__getitem__',
                                                                                                         'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudWithDistancesDataset.__init__': ( 'library/datasets.html#pointcloudwithdistancesdataset.__init__',
                                                                                                      'autometric/datasets.py'),
                                     'autometric.datasets.PointcloudWithDistancesDataset.__len__': ( 'library/datasets.html#pointcloudwithdistancesdataset.__len__',
                                                                                                     'autometric/datasets.py'),
                                     'autometric.datasets.Saddle': ('library/datasets.html#saddle', 'autometric/datasets.py'),
                                     'autometric.datasets.Saddle.__init__': ( 'library/datasets.html#saddle.__init__',
                                                                              'autometric/datasets.py'),
                                     'autometric.datasets.Saddle.immersion': ( 'library/datasets.html#saddle.immersion',
                                                                               'autometric/datasets.py'),
                                     'autometric.datasets.Sphere': ('library/datasets.html#sphere', 'autometric/datasets.py'),
                                     'autometric.datasets.Sphere.__init__': ( 'library/datasets.html#sphere.__init__',
                                                                              'autometric/datasets.py'),
                                     'autometric.datasets.Sphere.geodesic': ( 'library/datasets.html#sphere.geodesic',
                                                                              'autometric/datasets.py'),
                                     'autometric.datasets.Torus': ('library/datasets.html#torus', 'autometric/datasets.py'),
                                     'autometric.datasets.Torus.__init__': ( 'library/datasets.html#torus.__init__',
                                                                             'autometric/datasets.py'),
                                     'autometric.datasets.Torus.scalar_curvature': ( 'library/datasets.html#torus.scalar_curvature',
                                                                                     'autometric/datasets.py'),
                                     'autometric.datasets.ToyManifold': ('library/datasets.html#toymanifold', 'autometric/datasets.py'),
                                     'autometric.datasets.ToyManifold.__init__': ( 'library/datasets.html#toymanifold.__init__',
                                                                                   'autometric/datasets.py'),
                                     'autometric.datasets.ToyManifold.compute_immersion': ( 'library/datasets.html#toymanifold.compute_immersion',
                                                                                            'autometric/datasets.py'),
                                     'autometric.datasets.ToyManifold.compute_metrics': ( 'library/datasets.html#toymanifold.compute_metrics',
                                                                                          'autometric/datasets.py'),
                                     'autometric.datasets.ToyManifold.plot': ( 'library/datasets.html#toymanifold.plot',
                                                                               'autometric/datasets.py'),
                                     'autometric.datasets.ToyManifold.sample': ( 'library/datasets.html#toymanifold.sample',
                                                                                 'autometric/datasets.py'),
                                     'autometric.datasets.dataloader_from_pointcloud_with_distances': ( 'library/datasets.html#dataloader_from_pointcloud_with_distances',
                                                                                                        'autometric/datasets.py'),
                                     'autometric.datasets.export_datasets': ( 'library/datasets.html#export_datasets',
                                                                              'autometric/datasets.py'),
                                     'autometric.datasets.manifold_density': ( 'library/datasets.html#manifold_density',
                                                                               'autometric/datasets.py'),
                                     'autometric.datasets.max_value': ('library/datasets.html#max_value', 'autometric/datasets.py'),
                                     'autometric.datasets.plot_3d_vector_field': ( 'library/datasets.html#plot_3d_vector_field',
                                                                                   'autometric/datasets.py'),
                                     'autometric.datasets.rejection_sample_from_surface': ( 'library/datasets.html#rejection_sample_from_surface',
                                                                                            'autometric/datasets.py'),
                                     'autometric.datasets.sphere_with_normals': ( 'library/datasets.html#sphere_with_normals',
                                                                                  'autometric/datasets.py'),
                                     'autometric.datasets.train_and_testloader_from_pointcloud_with_distances': ( 'library/datasets.html#train_and_testloader_from_pointcloud_with_distances',
                                                                                                                  'autometric/datasets.py')},
            'autometric.experiments.pullback_comparison': { 'autometric.experiments.pullback_comparison.PullbackComparisonDataset': ( 'experiments/1-comparing-pullback-types.html#pullbackcomparisondataset',
                                                                                                                                      'autometric/experiments/pullback_comparison.py'),
                                                            'autometric.experiments.pullback_comparison.PullbackComparisonDataset.__init__': ( 'experiments/1-comparing-pullback-types.html#pullbackcomparisondataset.__init__',
                                                                                                                                               'autometric/experiments/pullback_comparison.py'),
                                                            'autometric.experiments.pullback_comparison.PullbackComparisonDataset.compute': ( 'experiments/1-comparing-pullback-types.html#pullbackcomparisondataset.compute',
                                                                                                                                              'autometric/experiments/pullback_comparison.py'),
                                                            'autometric.experiments.pullback_comparison.PullbackComparisonDataset.dataset_mse': ( 'experiments/1-comparing-pullback-types.html#pullbackcomparisondataset.dataset_mse',
                                                                                                                                                  'autometric/experiments/pullback_comparison.py'),
                                                            'autometric.experiments.pullback_comparison.PullbackComparisonDataset.get_item': ( 'experiments/1-comparing-pullback-types.html#pullbackcomparisondataset.get_item',
                                                                                                                                               'autometric/experiments/pullback_comparison.py'),
                                                            'autometric.experiments.pullback_comparison.PullbackComparisonDataset.get_truth': ( 'experiments/1-comparing-pullback-types.html#pullbackcomparisondataset.get_truth',
                                                                                                                                                'autometric/experiments/pullback_comparison.py')},
            'autometric.geometry': {},
            'autometric.jacobian': { 'autometric.jacobian.compute_jacobian_function': ( 'library/jacobian.html#compute_jacobian_function',
                                                                                        'autometric/jacobian.py')},
            'autometric.manifolds': { 'autometric.manifolds.RiemannianManifold': ( 'library/manifolds.html#riemannianmanifold',
                                                                                   'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.__init__': ( 'library/manifolds.html#riemannianmanifold.__init__',
                                                                                            'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.belongs': ( 'library/manifolds.html#riemannianmanifold.belongs',
                                                                                           'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.broken_scalar_curvature': ( 'library/manifolds.html#riemannianmanifold.broken_scalar_curvature',
                                                                                                           'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.christoffel_derivative': ( 'library/manifolds.html#riemannianmanifold.christoffel_derivative',
                                                                                                          'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.generate_unit_vectors': ( 'library/manifolds.html#riemannianmanifold.generate_unit_vectors',
                                                                                                         'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.is_tangent': ( 'library/manifolds.html#riemannianmanifold.is_tangent',
                                                                                              'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.metric_det': ( 'library/manifolds.html#riemannianmanifold.metric_det',
                                                                                              'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.metric_logdet': ( 'library/manifolds.html#riemannianmanifold.metric_logdet',
                                                                                                 'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.random_point': ( 'library/manifolds.html#riemannianmanifold.random_point',
                                                                                                'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.ricci_tensor': ( 'library/manifolds.html#riemannianmanifold.ricci_tensor',
                                                                                                'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.riemannian_curvature': ( 'library/manifolds.html#riemannianmanifold.riemannian_curvature',
                                                                                                        'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.riemannian_curvature_tensor': ( 'library/manifolds.html#riemannianmanifold.riemannian_curvature_tensor',
                                                                                                               'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.scalar_curvature': ( 'library/manifolds.html#riemannianmanifold.scalar_curvature',
                                                                                                    'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.sectional_curvature': ( 'library/manifolds.html#riemannianmanifold.sectional_curvature',
                                                                                                       'autometric/manifolds.py'),
                                      'autometric.manifolds.RiemannianManifold.to_tangent': ( 'library/manifolds.html#riemannianmanifold.to_tangent',
                                                                                              'autometric/manifolds.py')},
            'autometric.metrics': { 'autometric.metrics.PullbackMetric': ('library/metrics.html#pullbackmetric', 'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.__init__': ( 'library/metrics.html#pullbackmetric.__init__',
                                                                                    'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.christoffels': ( 'library/metrics.html#pullbackmetric.christoffels',
                                                                                        'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.cometric_matrix': ( 'library/metrics.html#pullbackmetric.cometric_matrix',
                                                                                           'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.inner_product': ( 'library/metrics.html#pullbackmetric.inner_product',
                                                                                         'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.metric_matrix': ( 'library/metrics.html#pullbackmetric.metric_matrix',
                                                                                         'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.metric_matrix_derivative': ( 'library/metrics.html#pullbackmetric.metric_matrix_derivative',
                                                                                                    'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.norm': ( 'library/metrics.html#pullbackmetric.norm',
                                                                                'autometric/metrics.py'),
                                    'autometric.metrics.PullbackMetric.normalize': ( 'library/metrics.html#pullbackmetric.normalize',
                                                                                     'autometric/metrics.py')},
            'autometric.self_evaluating_datasets': { 'autometric.self_evaluating_datasets.SelfEvaluatingDataset': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset',
                                                                                                                    'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.__init__': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.__init__',
                                                                                                                             'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.__iter__': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.__iter__',
                                                                                                                             'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.__len__': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.__len__',
                                                                                                                            'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.__next__': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.__next__',
                                                                                                                             'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset._aggregate_labels': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset._aggregate_labels',
                                                                                                                                      'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset._get_metrics': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset._get_metrics',
                                                                                                                                 'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset._store_truth': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset._store_truth',
                                                                                                                                 'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.compute': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.compute',
                                                                                                                            'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.compute_metrics': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.compute_metrics',
                                                                                                                                    'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.get_item': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.get_item',
                                                                                                                             'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.get_truth': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.get_truth',
                                                                                                                              'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.plot': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.plot',
                                                                                                                         'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.preprocess': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.preprocess',
                                                                                                                               'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.table': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.table',
                                                                                                                          'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.SelfEvaluatingDataset.update': ( 'library/self-evaluating-datasets.html#selfevaluatingdataset.update',
                                                                                                                           'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.Wrapper': ( 'library/self-evaluating-datasets.html#wrapper',
                                                                                                      'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.Wrapper.__init__': ( 'library/self-evaluating-datasets.html#wrapper.__init__',
                                                                                                               'autometric/self_evaluating_datasets.py'),
                                                     'autometric.self_evaluating_datasets.metric': ( 'library/self-evaluating-datasets.html#metric',
                                                                                                     'autometric/self_evaluating_datasets.py')},
            'autometric.utils': { 'autometric.utils.Color': ('library/util.html#color', 'autometric/utils.py'),
                                  'autometric.utils.batch_jacobian': ('library/util.html#batch_jacobian', 'autometric/utils.py'),
                                  'autometric.utils.cmap_labels': ('library/util.html#cmap_labels', 'autometric/utils.py'),
                                  'autometric.utils.determine_scaling_fn': ( 'library/util.html#determine_scaling_fn',
                                                                             'autometric/utils.py'),
                                  'autometric.utils.get_coordinates': ('library/util.html#get_coordinates', 'autometric/utils.py'),
                                  'autometric.utils.get_hull': ('library/util.html#get_hull', 'autometric/utils.py'),
                                  'autometric.utils.get_next_digit': ('library/util.html#get_next_digit', 'autometric/utils.py'),
                                  'autometric.utils.get_saving_kwargs': ('library/util.html#get_saving_kwargs', 'autometric/utils.py'),
                                  'autometric.utils.get_sc_kwargs': ('library/util.html#get_sc_kwargs', 'autometric/utils.py'),
                                  'autometric.utils.get_significant': ('library/util.html#get_significant', 'autometric/utils.py'),
                                  'autometric.utils.gif_from_multiarray': ('library/util.html#gif_from_multiarray', 'autometric/utils.py'),
                                  'autometric.utils.in_hull': ('library/util.html#in_hull', 'autometric/utils.py'),
                                  'autometric.utils.minmax': ('library/util.html#minmax', 'autometric/utils.py'),
                                  'autometric.utils.pathpatch_2d_to_3d': ('library/util.html#pathpatch_2d_to_3d', 'autometric/utils.py'),
                                  'autometric.utils.pathpatch_translate': ('library/util.html#pathpatch_translate', 'autometric/utils.py'),
                                  'autometric.utils.plot_3d': ('library/util.html#plot_3d', 'autometric/utils.py'),
                                  'autometric.utils.printnum': ('library/util.html#printnum', 'autometric/utils.py'),
                                  'autometric.utils.rotation_matrix': ('library/util.html#rotation_matrix', 'autometric/utils.py'),
                                  'autometric.utils.round_significant': ('library/util.html#round_significant', 'autometric/utils.py'),
                                  'autometric.utils.symlog': ('library/util.html#symlog', 'autometric/utils.py'),
                                  'autometric.utils.symlog_inv': ('library/util.html#symlog_inv', 'autometric/utils.py'),
                                  'autometric.utils.transform_axes': ('library/util.html#transform_axes', 'autometric/utils.py'),
                                  'autometric.utils.values_in_quantile': ('library/util.html#values_in_quantile', 'autometric/utils.py'),
                                  'autometric.utils.visualize_embedding': ('library/util.html#visualize_embedding', 'autometric/utils.py')},
            'autometric.visualization': { 'autometric.visualization.plot_jacobian': ( 'library/visualization.html#plot_jacobian',
                                                                                      'autometric/visualization.py'),
                                          'autometric.visualization.plot_jacobian_multi': ( 'library/visualization.html#plot_jacobian_multi',
                                                                                            'autometric/visualization.py')}}}
