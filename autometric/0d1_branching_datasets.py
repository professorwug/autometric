# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/0d1 Branching Datasets.ipynb.

# %% auto 0
__all__ = ['Stick']

# %% ../nbs/0d1 Branching Datasets.ipynb 3
from fastcore.all import *
from diffusion_curvature.random_surfaces import random_polynomial
import sympy as sp

class Stick():
    def __init__(
        self,
        dimension,
        degree,
        start_point,
        time_range = 1
    ):
        store_attr()
        # construct a unique polynomial for yourself
        x = sp.symbols('x')
        p = random_polynomial(
            [x],degree
        )
        self.polynomial = p
        self.polynomial_np = sp.lambdify([x], self.polynomial, "numpy")

        # random direction for polynomial
        self.direction = np.random.randn(self.dimension)

    def sample_at_time(self,t):
        return self.polynomial_np(self.direction*t)+ self.start_point

    def end_point(self):
        return self.sample_at_time(self.time_range)

    def sample(self, n_samples):
        ts = np.random.rand(n_samples)*self.time_range
        Xs = [self.sample_at_time(t) for t in ts]
        return np.array(Xs)
